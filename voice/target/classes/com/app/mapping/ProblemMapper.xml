<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.dao.ProblemMapper" >
  <resultMap id="BaseResultMap" type="com.code.model.Problem" >
    <id column="problem_id" property="problemId" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="explanation" property="explanation" jdbcType="VARCHAR" />
    <result column="pinyin" property="pinyin" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    problem_id, content, type, explanation, pinyin
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.code.model.ProblemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from problem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from problem
    where problem_id = #{problemId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from problem
    where problem_id = #{problemId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.code.model.ProblemExample" >
    delete from problem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.code.model.Problem" >
    insert into problem (problem_id, content, type, 
      explanation, pinyin)
    values (#{problemId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{explanation,jdbcType=VARCHAR}, #{pinyin,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.code.model.Problem" >
    insert into problem
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="problemId != null" >
        problem_id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="explanation != null" >
        explanation,
      </if>
      <if test="pinyin != null" >
        pinyin,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="problemId != null" >
        #{problemId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="explanation != null" >
        #{explanation,jdbcType=VARCHAR},
      </if>
      <if test="pinyin != null" >
        #{pinyin,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.code.model.ProblemExample" resultType="java.lang.Integer" >
    select count(*) from problem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update problem
    <set >
      <if test="record.problemId != null" >
        problem_id = #{record.problemId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.explanation != null" >
        explanation = #{record.explanation,jdbcType=VARCHAR},
      </if>
      <if test="record.pinyin != null" >
        pinyin = #{record.pinyin,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update> 
  <update id="updateByExample" parameterType="map" >
    update problem
    set problem_id = #{record.problemId,jdbcType=INTEGER},
      content = #{record.content,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      explanation = #{record.explanation,jdbcType=VARCHAR},
      pinyin = #{record.pinyin,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.code.model.Problem" >
    update problem
    <set >
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="explanation != null" >
        explanation = #{explanation,jdbcType=VARCHAR},
      </if>
      <if test="pinyin != null" >
        pinyin = #{pinyin,jdbcType=VARCHAR},
      </if>
    </set>
    where problem_id = #{problemId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.code.model.Problem" >
    update problem
    set content = #{content,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      explanation = #{explanation,jdbcType=VARCHAR},
      pinyin = #{pinyin,jdbcType=VARCHAR}
    where problem_id = #{problemId,jdbcType=INTEGER}
  </update> 
  
  <select id="getRanRecord" resultMap="BaseResultMap" >
    select * from problem where type = #{0} and problem_id >= ( ((select MAX(problem_id) from problem where type = #{0}) - (select MIN(problem_id) from problem where type = #{0})) * RAND() + (select MIN(problem_id) from problem where type = #{0})) LIMIT #{1}
  </select>
  
</mapper>